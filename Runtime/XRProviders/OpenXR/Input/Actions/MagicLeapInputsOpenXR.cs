//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Packages/com.magicleap.mrtk3/Runtime/XRProviders/OpenXR/Input/MagicLeapInputsOpenXR.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MagicLeap.MRTK.Input
{
    public partial class @MagicLeapInputsOpenXR: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @MagicLeapInputsOpenXR()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""MagicLeapInputsOpenXR"",
    ""maps"": [
        {
            ""name"": ""HMD"",
            ""id"": ""f06df3d1-7563-401e-a388-449fa45c5a00"",
            ""actions"": [
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""312f2bb0-41e6-46af-8878-b39a309cfdef"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""797be00a-c167-4802-b73c-29e1ba649aaf"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Status"",
                    ""type"": ""Value"",
                    ""id"": ""99f29b0f-2292-4973-aa34-8526884993ab"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""611c6104-9555-4b98-bd0c-21345fd9e1ed"",
                    ""path"": ""<OpenXRHmd>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b17993f6-42a5-4c0d-8008-c3e4c051a4fc"",
                    ""path"": ""<OpenXRHmd>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b142fd70-6768-4fa2-8175-03d8482a0a3c"",
                    ""path"": ""<OpenXRHmd>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Status"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""id"": ""b477cd7c-2f77-4ce2-950f-4649605e45ac"",
            ""actions"": [
                {
                    ""name"": ""PointerPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""57c374bf-a9c3-4c30-a9d2-12d4387b19a7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerRotation"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7289b128-4230-4cf1-bba4-743cc92f2ee3"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Velocity"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e8501d82-59bf-489b-96e9-409ebba0c027"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AngularVelocity"",
                    ""type"": ""PassThrough"",
                    ""id"": ""89324b00-75a2-4c92-91e8-3add774ac5b4"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuButton"",
                    ""type"": ""Button"",
                    ""id"": ""ef46d924-78ad-4e18-98f0-b1d05ad4649d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bumper"",
                    ""type"": ""Button"",
                    ""id"": ""8a82fc41-c7bb-47e9-90cf-6b508eb9ec38"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Trigger"",
                    ""type"": ""Button"",
                    ""id"": ""1fa3608e-6202-4454-a93b-48c342dd01bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerValue"",
                    ""type"": ""Value"",
                    ""id"": ""a3d1103c-8976-4e71-a889-4110ba92cb35"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Trackpad"",
                    ""type"": ""PassThrough"",
                    ""id"": ""65af3c68-5988-45e8-b42d-d0bb1b7f7b4f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackpadClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c786f758-f16b-4091-a9ee-b739f9a1c707"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackpadTouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0a6ad199-7d10-45a3-87e9-06839edbf8e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TrackpadForce"",
                    ""type"": ""PassThrough"",
                    ""id"": ""41d8fd8f-dca5-407a-abc8-8b945c8f7a3f"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Haptics"",
                    ""type"": ""PassThrough"",
                    ""id"": ""bab4b5f6-4398-4486-adf6-1523ae70dd66"",
                    ""expectedControlType"": ""Haptic"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Position"",
                    ""type"": ""Value"",
                    ""id"": ""a8c79e98-f254-4736-b548-d06b06ce8566"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""074466ed-6925-49cb-aa95-9b269b87567a"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""IsTracked"",
                    ""type"": ""Value"",
                    ""id"": ""b4aa4314-d7d0-4266-b667-25e31fd39dff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Status"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6d22750d-63bf-439a-a40c-7ebf72a6acd3"",
                    ""expectedControlType"": ""Integer"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c2b03674-dafa-444c-8620-3280c282adf9"",
                    ""path"": ""<MagicLeapController>{RightHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""807f91c0-0511-4b5a-8873-55fff6b2dd78"",
                    ""path"": ""<MagicLeapController>{LeftHand}/pointerPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""PointerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""123b83cc-1670-4b3c-8f11-e5b34719c3e9"",
                    ""path"": ""<MagicLeapController>{RightHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""PointerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d664175-4eb6-4001-80ea-caabb83d96c1"",
                    ""path"": ""<MagicLeapController>{LeftHand}/pointerRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""PointerRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed720ad1-1591-42c9-8fea-f67b6cbd71b4"",
                    ""path"": ""<MagicLeapController>{RightHand}/devicePose/velocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1899de22-a04e-4e70-9097-9a43f53a7c76"",
                    ""path"": ""<MagicLeapController>{LeftHand}/devicePose/velocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Velocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4bd4782-41da-47ad-8af6-7488a2b1b65c"",
                    ""path"": ""<MagicLeapController>{RightHand}/devicePose/angularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""AngularVelocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2503a0b3-63e5-436b-847f-2d7c5c754c90"",
                    ""path"": ""<MagicLeapController>{LeftHand}/devicePose/angularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""AngularVelocity"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb2117c2-c605-4d16-a2b4-821ee5c48b64"",
                    ""path"": ""<MagicLeapController>{RightHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""MenuButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2d31f5b0-6f06-4700-8d01-1a16b02dd70a"",
                    ""path"": ""<MagicLeapController>{LeftHand}/menu"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""MenuButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f07aae71-8fda-4cd6-80ba-834356c0194b"",
                    ""path"": ""<MagicLeapController>{RightHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Bumper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9cb79fde-ac33-4ef1-846c-e7bf44ac1091"",
                    ""path"": ""<MagicLeapController>{LeftHand}/gripPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Bumper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""746677a3-c8ea-4d81-bbb3-1f2acbddc396"",
                    ""path"": ""<MagicLeapController>{RightHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a465f9aa-6f2b-4305-93d7-e1c36952d511"",
                    ""path"": ""<MagicLeapController>{LeftHand}/triggerPressed"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Trigger"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d99730b6-e38d-46da-a526-7501ab529be8"",
                    ""path"": ""<MagicLeapController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""TriggerValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f36a4761-b7a0-4eeb-84ac-cc7e22b30aaa"",
                    ""path"": ""<MagicLeapController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""TriggerValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cffb6d5-9a32-43bb-b0a0-342f33259b43"",
                    ""path"": ""<MagicLeapController>{RightHand}/trackpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Trackpad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc9468c7-8e48-4157-a153-833863a23000"",
                    ""path"": ""<MagicLeapController>{LeftHand}/trackpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Trackpad"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c6eed82-abf6-49df-8fe0-0fa2bdf24f6f"",
                    ""path"": ""<MagicLeapController>{RightHand}/trackpadClicked"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""TrackpadClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e0a128a-6ee0-43cd-bb23-639cfd6833bf"",
                    ""path"": ""<MagicLeapController>{LeftHand}/trackpadClicked"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""TrackpadClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6dd3ddf5-3520-41e1-9d77-c3ccfd93f61a"",
                    ""path"": ""<MagicLeapController>{RightHand}/trackpadTouched"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""TrackpadTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f3af52d-7a6a-4821-9512-9ece9362448d"",
                    ""path"": ""<MagicLeapController>{LeftHand}/trackpadTouched"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""TrackpadTouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe55468c-a237-4002-89f1-3413e4d314ae"",
                    ""path"": ""<MagicLeapController>{RightHand}/trackpadForce"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""TrackpadForce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b2bd206-1cca-4567-a54c-d2ea6988fbd5"",
                    ""path"": ""<MagicLeapController>{LeftHand}/trackpadForce"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""TrackpadForce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7aa68ee3-4038-4959-97fc-ed97ebd3fd46"",
                    ""path"": ""<MagicLeapController>{RightHand}/haptic"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Haptics"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c399e39-f2ab-4273-9b8e-c2897c239f39"",
                    ""path"": ""<MagicLeapController>{LeftHand}/haptic"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Haptics"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cf127877-5ef7-484c-9b4c-a86fc1923873"",
                    ""path"": ""<MagicLeapController>/isTracked"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""IsTracked"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3708fef9-50be-430a-990e-bccd04ba249a"",
                    ""path"": ""<MagicLeapController>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""977183e8-1622-4bd1-afdb-aa6db23ab77e"",
                    ""path"": ""<MagicLeapController>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Magic Leap 2"",
                    ""action"": ""Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1648f80-d831-4a40-8de2-2c1839366c36"",
                    ""path"": ""<MagicLeapController>/trackingState"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Status"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Magic Leap 2"",
            ""bindingGroup"": ""Magic Leap 2"",
            ""devices"": [
                {
                    ""devicePath"": ""<OpenXRHmd>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<MagicLeapController>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // HMD
            m_HMD = asset.FindActionMap("HMD", throwIfNotFound: true);
            m_HMD_Position = m_HMD.FindAction("Position", throwIfNotFound: true);
            m_HMD_Rotation = m_HMD.FindAction("Rotation", throwIfNotFound: true);
            m_HMD_Status = m_HMD.FindAction("Status", throwIfNotFound: true);
            // Controller
            m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
            m_Controller_PointerPosition = m_Controller.FindAction("PointerPosition", throwIfNotFound: true);
            m_Controller_PointerRotation = m_Controller.FindAction("PointerRotation", throwIfNotFound: true);
            m_Controller_Velocity = m_Controller.FindAction("Velocity", throwIfNotFound: true);
            m_Controller_AngularVelocity = m_Controller.FindAction("AngularVelocity", throwIfNotFound: true);
            m_Controller_MenuButton = m_Controller.FindAction("MenuButton", throwIfNotFound: true);
            m_Controller_Bumper = m_Controller.FindAction("Bumper", throwIfNotFound: true);
            m_Controller_Trigger = m_Controller.FindAction("Trigger", throwIfNotFound: true);
            m_Controller_TriggerValue = m_Controller.FindAction("TriggerValue", throwIfNotFound: true);
            m_Controller_Trackpad = m_Controller.FindAction("Trackpad", throwIfNotFound: true);
            m_Controller_TrackpadClick = m_Controller.FindAction("TrackpadClick", throwIfNotFound: true);
            m_Controller_TrackpadTouch = m_Controller.FindAction("TrackpadTouch", throwIfNotFound: true);
            m_Controller_TrackpadForce = m_Controller.FindAction("TrackpadForce", throwIfNotFound: true);
            m_Controller_Haptics = m_Controller.FindAction("Haptics", throwIfNotFound: true);
            m_Controller_Position = m_Controller.FindAction("Position", throwIfNotFound: true);
            m_Controller_Rotation = m_Controller.FindAction("Rotation", throwIfNotFound: true);
            m_Controller_IsTracked = m_Controller.FindAction("IsTracked", throwIfNotFound: true);
            m_Controller_Status = m_Controller.FindAction("Status", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // HMD
        private readonly InputActionMap m_HMD;
        private List<IHMDActions> m_HMDActionsCallbackInterfaces = new List<IHMDActions>();
        private readonly InputAction m_HMD_Position;
        private readonly InputAction m_HMD_Rotation;
        private readonly InputAction m_HMD_Status;
        public struct HMDActions
        {
            private @MagicLeapInputsOpenXR m_Wrapper;
            public HMDActions(@MagicLeapInputsOpenXR wrapper) { m_Wrapper = wrapper; }
            public InputAction @Position => m_Wrapper.m_HMD_Position;
            public InputAction @Rotation => m_Wrapper.m_HMD_Rotation;
            public InputAction @Status => m_Wrapper.m_HMD_Status;
            public InputActionMap Get() { return m_Wrapper.m_HMD; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HMDActions set) { return set.Get(); }
            public void AddCallbacks(IHMDActions instance)
            {
                if (instance == null || m_Wrapper.m_HMDActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_HMDActionsCallbackInterfaces.Add(instance);
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @Status.started += instance.OnStatus;
                @Status.performed += instance.OnStatus;
                @Status.canceled += instance.OnStatus;
            }

            private void UnregisterCallbacks(IHMDActions instance)
            {
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @Status.started -= instance.OnStatus;
                @Status.performed -= instance.OnStatus;
                @Status.canceled -= instance.OnStatus;
            }

            public void RemoveCallbacks(IHMDActions instance)
            {
                if (m_Wrapper.m_HMDActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IHMDActions instance)
            {
                foreach (var item in m_Wrapper.m_HMDActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_HMDActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public HMDActions @HMD => new HMDActions(this);

        // Controller
        private readonly InputActionMap m_Controller;
        private List<IControllerActions> m_ControllerActionsCallbackInterfaces = new List<IControllerActions>();
        private readonly InputAction m_Controller_PointerPosition;
        private readonly InputAction m_Controller_PointerRotation;
        private readonly InputAction m_Controller_Velocity;
        private readonly InputAction m_Controller_AngularVelocity;
        private readonly InputAction m_Controller_MenuButton;
        private readonly InputAction m_Controller_Bumper;
        private readonly InputAction m_Controller_Trigger;
        private readonly InputAction m_Controller_TriggerValue;
        private readonly InputAction m_Controller_Trackpad;
        private readonly InputAction m_Controller_TrackpadClick;
        private readonly InputAction m_Controller_TrackpadTouch;
        private readonly InputAction m_Controller_TrackpadForce;
        private readonly InputAction m_Controller_Haptics;
        private readonly InputAction m_Controller_Position;
        private readonly InputAction m_Controller_Rotation;
        private readonly InputAction m_Controller_IsTracked;
        private readonly InputAction m_Controller_Status;
        public struct ControllerActions
        {
            private @MagicLeapInputsOpenXR m_Wrapper;
            public ControllerActions(@MagicLeapInputsOpenXR wrapper) { m_Wrapper = wrapper; }
            public InputAction @PointerPosition => m_Wrapper.m_Controller_PointerPosition;
            public InputAction @PointerRotation => m_Wrapper.m_Controller_PointerRotation;
            public InputAction @Velocity => m_Wrapper.m_Controller_Velocity;
            public InputAction @AngularVelocity => m_Wrapper.m_Controller_AngularVelocity;
            public InputAction @MenuButton => m_Wrapper.m_Controller_MenuButton;
            public InputAction @Bumper => m_Wrapper.m_Controller_Bumper;
            public InputAction @Trigger => m_Wrapper.m_Controller_Trigger;
            public InputAction @TriggerValue => m_Wrapper.m_Controller_TriggerValue;
            public InputAction @Trackpad => m_Wrapper.m_Controller_Trackpad;
            public InputAction @TrackpadClick => m_Wrapper.m_Controller_TrackpadClick;
            public InputAction @TrackpadTouch => m_Wrapper.m_Controller_TrackpadTouch;
            public InputAction @TrackpadForce => m_Wrapper.m_Controller_TrackpadForce;
            public InputAction @Haptics => m_Wrapper.m_Controller_Haptics;
            public InputAction @Position => m_Wrapper.m_Controller_Position;
            public InputAction @Rotation => m_Wrapper.m_Controller_Rotation;
            public InputAction @IsTracked => m_Wrapper.m_Controller_IsTracked;
            public InputAction @Status => m_Wrapper.m_Controller_Status;
            public InputActionMap Get() { return m_Wrapper.m_Controller; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
            public void AddCallbacks(IControllerActions instance)
            {
                if (instance == null || m_Wrapper.m_ControllerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_ControllerActionsCallbackInterfaces.Add(instance);
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
                @PointerRotation.started += instance.OnPointerRotation;
                @PointerRotation.performed += instance.OnPointerRotation;
                @PointerRotation.canceled += instance.OnPointerRotation;
                @Velocity.started += instance.OnVelocity;
                @Velocity.performed += instance.OnVelocity;
                @Velocity.canceled += instance.OnVelocity;
                @AngularVelocity.started += instance.OnAngularVelocity;
                @AngularVelocity.performed += instance.OnAngularVelocity;
                @AngularVelocity.canceled += instance.OnAngularVelocity;
                @MenuButton.started += instance.OnMenuButton;
                @MenuButton.performed += instance.OnMenuButton;
                @MenuButton.canceled += instance.OnMenuButton;
                @Bumper.started += instance.OnBumper;
                @Bumper.performed += instance.OnBumper;
                @Bumper.canceled += instance.OnBumper;
                @Trigger.started += instance.OnTrigger;
                @Trigger.performed += instance.OnTrigger;
                @Trigger.canceled += instance.OnTrigger;
                @TriggerValue.started += instance.OnTriggerValue;
                @TriggerValue.performed += instance.OnTriggerValue;
                @TriggerValue.canceled += instance.OnTriggerValue;
                @Trackpad.started += instance.OnTrackpad;
                @Trackpad.performed += instance.OnTrackpad;
                @Trackpad.canceled += instance.OnTrackpad;
                @TrackpadClick.started += instance.OnTrackpadClick;
                @TrackpadClick.performed += instance.OnTrackpadClick;
                @TrackpadClick.canceled += instance.OnTrackpadClick;
                @TrackpadTouch.started += instance.OnTrackpadTouch;
                @TrackpadTouch.performed += instance.OnTrackpadTouch;
                @TrackpadTouch.canceled += instance.OnTrackpadTouch;
                @TrackpadForce.started += instance.OnTrackpadForce;
                @TrackpadForce.performed += instance.OnTrackpadForce;
                @TrackpadForce.canceled += instance.OnTrackpadForce;
                @Haptics.started += instance.OnHaptics;
                @Haptics.performed += instance.OnHaptics;
                @Haptics.canceled += instance.OnHaptics;
                @Position.started += instance.OnPosition;
                @Position.performed += instance.OnPosition;
                @Position.canceled += instance.OnPosition;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @IsTracked.started += instance.OnIsTracked;
                @IsTracked.performed += instance.OnIsTracked;
                @IsTracked.canceled += instance.OnIsTracked;
                @Status.started += instance.OnStatus;
                @Status.performed += instance.OnStatus;
                @Status.canceled += instance.OnStatus;
            }

            private void UnregisterCallbacks(IControllerActions instance)
            {
                @PointerPosition.started -= instance.OnPointerPosition;
                @PointerPosition.performed -= instance.OnPointerPosition;
                @PointerPosition.canceled -= instance.OnPointerPosition;
                @PointerRotation.started -= instance.OnPointerRotation;
                @PointerRotation.performed -= instance.OnPointerRotation;
                @PointerRotation.canceled -= instance.OnPointerRotation;
                @Velocity.started -= instance.OnVelocity;
                @Velocity.performed -= instance.OnVelocity;
                @Velocity.canceled -= instance.OnVelocity;
                @AngularVelocity.started -= instance.OnAngularVelocity;
                @AngularVelocity.performed -= instance.OnAngularVelocity;
                @AngularVelocity.canceled -= instance.OnAngularVelocity;
                @MenuButton.started -= instance.OnMenuButton;
                @MenuButton.performed -= instance.OnMenuButton;
                @MenuButton.canceled -= instance.OnMenuButton;
                @Bumper.started -= instance.OnBumper;
                @Bumper.performed -= instance.OnBumper;
                @Bumper.canceled -= instance.OnBumper;
                @Trigger.started -= instance.OnTrigger;
                @Trigger.performed -= instance.OnTrigger;
                @Trigger.canceled -= instance.OnTrigger;
                @TriggerValue.started -= instance.OnTriggerValue;
                @TriggerValue.performed -= instance.OnTriggerValue;
                @TriggerValue.canceled -= instance.OnTriggerValue;
                @Trackpad.started -= instance.OnTrackpad;
                @Trackpad.performed -= instance.OnTrackpad;
                @Trackpad.canceled -= instance.OnTrackpad;
                @TrackpadClick.started -= instance.OnTrackpadClick;
                @TrackpadClick.performed -= instance.OnTrackpadClick;
                @TrackpadClick.canceled -= instance.OnTrackpadClick;
                @TrackpadTouch.started -= instance.OnTrackpadTouch;
                @TrackpadTouch.performed -= instance.OnTrackpadTouch;
                @TrackpadTouch.canceled -= instance.OnTrackpadTouch;
                @TrackpadForce.started -= instance.OnTrackpadForce;
                @TrackpadForce.performed -= instance.OnTrackpadForce;
                @TrackpadForce.canceled -= instance.OnTrackpadForce;
                @Haptics.started -= instance.OnHaptics;
                @Haptics.performed -= instance.OnHaptics;
                @Haptics.canceled -= instance.OnHaptics;
                @Position.started -= instance.OnPosition;
                @Position.performed -= instance.OnPosition;
                @Position.canceled -= instance.OnPosition;
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
                @IsTracked.started -= instance.OnIsTracked;
                @IsTracked.performed -= instance.OnIsTracked;
                @IsTracked.canceled -= instance.OnIsTracked;
                @Status.started -= instance.OnStatus;
                @Status.performed -= instance.OnStatus;
                @Status.canceled -= instance.OnStatus;
            }

            public void RemoveCallbacks(IControllerActions instance)
            {
                if (m_Wrapper.m_ControllerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IControllerActions instance)
            {
                foreach (var item in m_Wrapper.m_ControllerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_ControllerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public ControllerActions @Controller => new ControllerActions(this);
        private int m_MagicLeap2SchemeIndex = -1;
        public InputControlScheme MagicLeap2Scheme
        {
            get
            {
                if (m_MagicLeap2SchemeIndex == -1) m_MagicLeap2SchemeIndex = asset.FindControlSchemeIndex("Magic Leap 2");
                return asset.controlSchemes[m_MagicLeap2SchemeIndex];
            }
        }
        public interface IHMDActions
        {
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnStatus(InputAction.CallbackContext context);
        }
        public interface IControllerActions
        {
            void OnPointerPosition(InputAction.CallbackContext context);
            void OnPointerRotation(InputAction.CallbackContext context);
            void OnVelocity(InputAction.CallbackContext context);
            void OnAngularVelocity(InputAction.CallbackContext context);
            void OnMenuButton(InputAction.CallbackContext context);
            void OnBumper(InputAction.CallbackContext context);
            void OnTrigger(InputAction.CallbackContext context);
            void OnTriggerValue(InputAction.CallbackContext context);
            void OnTrackpad(InputAction.CallbackContext context);
            void OnTrackpadClick(InputAction.CallbackContext context);
            void OnTrackpadTouch(InputAction.CallbackContext context);
            void OnTrackpadForce(InputAction.CallbackContext context);
            void OnHaptics(InputAction.CallbackContext context);
            void OnPosition(InputAction.CallbackContext context);
            void OnRotation(InputAction.CallbackContext context);
            void OnIsTracked(InputAction.CallbackContext context);
            void OnStatus(InputAction.CallbackContext context);
        }
    }
}
